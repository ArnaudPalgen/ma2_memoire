@misc{zolertia-remote:shop,
  key          = {Zolertia RE-Mote},
  title        = {{Zolertia RE-Mote}},
  howpublished = "\url{https://zolertia.io/product/re-mote/}",
  organisation = {Zolertia},
  note         = "[Accès en ligne le 14 juin 2021]"
}

@manual{zolertia-remote:datasheet,
    key           = {Zolertia RE-Mote datasheet},
    organization  = "Zolertia",
    title         = "Zolertia RE-Mote Revision B Internet of Things hardware development platform, for 2.4-GHz and 863-950MHz IEEE 802.15.4, 6LoWPAN and ZigBee® Applications",
    year          =  2016,
    month         =  9,    
    note          = "v.1.0.0"
}

@misc{rn2483:shop,
  key          = {RN2483},
  title        = {{RN2483.}},
  howpublished = "\url{https://www.microchip.com/wwwproducts/en/RN2483}",
  organisation = {Microchip},
  note         = "[Accès en ligne le 14 juin 2021]"
}

@manual{rn2483:datasheet,
    key           = {RN2483 datasheet},
    organization  = "Microchip",
    title         = "Low-Power Long Range LoRa ® Technology Transceiver Module",
    year          =  2020,
    month         =  6,    
    note          = "Rev. E"
}

@misc{raspberry:shop,
  key          = {Raspberry},
  title        = {{Raspberry Pi 3 Model B+}},
  howpublished = "\url{https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/}",
  organisation = {Raspberry Pi Foundation},
  note         = "[Accès en ligne le 15 juin 2021]"
}

@misc{contiki-repo:old,
  key          = {Contiki},
  title        = {{The Contiki Operating System}},
  howpublished = "\url{https://github.com/contiki-os/contiki}",
  organisation = {Contiki-OS},
  note         = "[Accès en ligne le 15 juin 2021]"
}

@misc{contiki-repo:ng,
  key          = {ContikiNG},
  title        = {{Contiki-NG: The OS for Next Generation IoT Devices}},
  howpublished = "\url{https://github.com/contiki-ng/contiki-ng}",
  organisation = {Contiki-OS},
  note         = "[Accès en ligne le 15 juin 2021]"
}

@misc{freertos,
  key          = {FreeRTOS},
  title        = {{FreeRTOS Real-time operating system for microcontrollers}},
  howpublished = "\url{https://freertos.org/index.html}",
  note         = "[Accès en ligne le 15 juin 2021]"
}

@misc{openwsn,
  key          = {OpenWSN},
  title        = {{OpenWSN}},
  howpublished = "\url{https://openwsn.atlassian.net/wiki/spaces/OW/overview?mode=global}",
  note         = "[Accès en ligne le 22 juin 2021]"
}


%------------------------------------------------------------
%new
@inproceedings{paper:rpl-study,
author = {Tripathi, Joydeep and Oliveira, Jose and Vasseur, J.-P},
title = {A performance evaluation study of RPL: Routing Protocol for Low power and Lossy Networks},
year = {2010},
month = {03},
pages = {1-6},
isbn = {978-1-4244-7416-5},
doi = {10.1109/CISS.2010.5464820}
}

@inproceedings{paper:protothreads,
author = {Dunkels, Adam and Schmidt, Oliver and Voigt, Thiemo and Ali, Muneeb},
title = {Protothreads: Simplifying Event-Driven Programming of Memory-Constrained Embedded Systems},
year = {2006},
isbn = {1595933433},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1182807.1182811},
doi = {10.1145/1182807.1182811},
abstract = {Event-driven programming is a popular model for writing programs for tiny embedded systems and sensor network nodes. While event-driven programming can keep the memory overhead down, it enforces a state machine programming style which makes many programs difficult to write, maintain, and debug. We present a novel programming abstraction called protothreads that makes it possible to write event-driven programs in a thread-like style, with a memory overhead of only two bytes per protothread. We show that protothreads significantly reduce the complexity of a number of widely used programs previously written with event-driven state machines. For the examined programs the majority of the state machines could be entirely removed. In the other cases the number of states and transitions was drastically decreased. With protothreads the number of lines of code was reduced by one third. The execution time overhead of protothreads is on the order of a few processor cycles.},
booktitle = {Proceedings of the 4th International Conference on Embedded Networked Sensor Systems},
pages = {29–42},
numpages = {14},
keywords = {threads, embedded systems, wireless sensor networks},
location = {Boulder, Colorado, USA},
series = {SenSys '06}
}

@article{paper:802.15.4e-survey,
title = {IEEE 802.15.4e: A survey},
journal = {Computer Communications},
volume = {88},
pages = {1-24},
year = {2016},
issn = {0140-3664},
doi = {https://doi.org/10.1016/j.comcom.2016.05.004},
url = {https://www.sciencedirect.com/science/article/pii/S0140366416301980},
author = {Domenico {De Guglielmo} and Simone Brienza and Giuseppe Anastasi},
keywords = {IEEE 802.15.4e, TSCH, DSME, LLDN, WSANs},
abstract = {Several studies have highlighted that the IEEE 802.15.4 standard presents a number of limitations such as low reliability, unbounded packet delays and no protection against interference/fading, that prevent its adoption in applications with stringent requirements in terms of reliability and latency. Recently, the IEEE has released the 802.15.4e amendment that introduces a number of enhancements/modifications to the MAC layer of the original standard in order to overcome such limitations. In this paper we provide a clear and structured overview of all the new 802.15.4e mechanisms. After a general introduction to the 802.15.4e standard, we describe the details of the main 802.15.4e MAC behavior modes, namely Time Slotted Channel Hopping (TSCH), Deterministic and Synchronous Multi-channel Extension (DSME), and Low Latency Deterministic Network (LLDN). For each of them, we provide a detailed description and highlight the main features and possible application domains. Also, we survey the current literature and summarize open research issues.}
}